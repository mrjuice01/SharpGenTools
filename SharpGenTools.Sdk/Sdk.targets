<Project InitialTargets="SharpGenCheckToolset">

  <Target Name="SharpGenCheckToolset"
          Condition="'$(SharpGenEnableToolsetCheck)' != 'false'">
    <Error Text="MSBuild version '$(MSBuildToolsVersion)' is not supported by SharpGenTools SDK."
           File="$(MSBuildProjectFullPath)"
           Code="SD0004"
           Condition="'$(MSBuildToolsVersion)' != 'Current'" />
    <Error Text="Only C# projects are supported by SharpGenTools SDK."
           File="$(MSBuildProjectFullPath)"
           Code="SD0007"
           Condition="'$(MSBuildProjectExtension)' != '.csproj'" />
  </Target>

  <Choose>
    <When Condition="'$(SharpGenIntermediateOutputDirectory)' == ''">
      <Choose>
        <When Condition="$([System.IO.Path]::IsPathRooted('$(BaseIntermediateOutputPath)'))">
          <PropertyGroup>
            <SharpGenIntermediateOutputDirectory>$([MSBuild]::NormalizeDirectory('$(BaseIntermediateOutputPath)'))</SharpGenIntermediateOutputDirectory>
          </PropertyGroup>
        </When>
        <Otherwise>
          <PropertyGroup>
            <SharpGenIntermediateOutputDirectory>$([MSBuild]::NormalizeDirectory('$(MSBuildProjectDirectory)', '$(BaseIntermediateOutputPath)'))</SharpGenIntermediateOutputDirectory>
          </PropertyGroup>
        </Otherwise>
      </Choose>
    </When>
    <When Condition="!$([System.IO.Path]::IsPathRooted('$(SharpGenIntermediateOutputDirectory)'))">
      <PropertyGroup>
        <SharpGenIntermediateOutputDirectory>$([MSBuild]::NormalizeDirectory('$(MSBuildProjectDirectory)', '$(SharpGenIntermediateOutputDirectory)'))</SharpGenIntermediateOutputDirectory>
      </PropertyGroup>
    </When>
    <When Condition="!HasTrailingSlash('$(SharpGenIntermediateOutputDirectory)')">
      <PropertyGroup>
        <SharpGenIntermediateOutputDirectory>$([MSBuild]::EnsureTrailingSlash('$(SharpGenIntermediateOutputDirectory)'))</SharpGenIntermediateOutputDirectory>
      </PropertyGroup>
    </When>
  </Choose>

  <PropertyGroup>
    <SharpGenConsumerBindMappingConfigId Condition="'$(SharpGenConsumerBindMappingConfigId)' == ''">$(AssemblyName)</SharpGenConsumerBindMappingConfigId>

    <SharpGenSdkToolsDirectory Condition="'$(SharpGenSdkToolsDirectory)' == ''">$([MSBuild]::NormalizeDirectory('$(MSBuildThisFileDirectory)', '..', 'tools'))</SharpGenSdkToolsDirectory>
    <CppStandard Condition="'$(CppStandard)' == ''">c++14</CppStandard>
    <SharpGenWaitForDebuggerAttach Condition="'$(SharpGenWaitForDebuggerAttach)' == ''">false</SharpGenWaitForDebuggerAttach>
    <SharpGenDocumentationFailuresAsErrors Condition="'$(SharpGenDocumentationFailuresAsErrors)' == ''">true</SharpGenDocumentationFailuresAsErrors>

    <ContinueOnError Condition="'$(ContinueOnError)' == ''">false</ContinueOnError>
  </PropertyGroup>

  <Choose>
    <When Condition="$([MSBuild]::IsOsUnixLike())">
      <PropertyGroup Condition="'$(SharpGenSdkAssemblyRuntimeIdentifier)' == ''">
        <SharpGenSdkAssemblyRuntimeIdentifier>unix</SharpGenSdkAssemblyRuntimeIdentifier>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup Condition="'$(CastXmlPath)' == ''">
        <CastXmlPath>$([System.IO.Path]::Combine('$(SharpGenSdkToolsDirectory)', 'CastXML', 'bin', 'castxml.exe'))</CastXmlPath>
      </PropertyGroup>
      <PropertyGroup Condition="'$(SharpGenSdkAssemblyRuntimeIdentifier)' == ''">
        <SharpGenSdkAssemblyRuntimeIdentifier>win</SharpGenSdkAssemblyRuntimeIdentifier>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup Condition="'$(SharpGenSdkAssemblyFrameworkIdentifier)' == ''">
    <SharpGenSdkAssemblyFrameworkIdentifier Condition="'$(MSBuildRuntimeType)' == 'Core'">net7.0</SharpGenSdkAssemblyFrameworkIdentifier>
    <SharpGenSdkAssemblyFrameworkIdentifier Condition="'$(MSBuildRuntimeType)' != 'Core'">net472</SharpGenSdkAssemblyFrameworkIdentifier>
  </PropertyGroup>

  <ItemGroup Condition="'@(SharpGenSdkAssembly)' == ''">
    <SharpGenSdkAssembly Include="$([System.IO.Path]::Combine('$(SharpGenSdkToolsDirectory)', '$(SharpGenSdkAssemblyFrameworkIdentifier)', '$(SharpGenSdkAssemblyRuntimeIdentifier)', 'SharpGenTools.Sdk.dll'))" />
    <Analyzer Include="$([System.IO.Path]::Combine('$(SharpGenSdkToolsDirectory)', '$(SharpGenSdkAssemblyFrameworkIdentifier)', '$(SharpGenSdkAssemblyRuntimeIdentifier)', 'SharpGen.Generator.dll'))" Condition="'@(SharpGenMapping)' != ''" />
  </ItemGroup>

  <ItemGroup Condition="'@(SharpGenMapping)' != ''">
    <CompilerVisibleProperty Include="SharpGenWaitForRoslynDebuggerAttach" />
  </ItemGroup>

  <ItemGroup Condition="'@(SharpGenCastXml)' == ''">
    <SharpGenCastXml Include="$(CastXmlPath)" />
  </ItemGroup>

  <ItemGroup Condition="'$(CastXmlMSVCCompat)' != 'false'">
    <CastXmlArg Include="-fmsc-version=1900" />
    <CastXmlArg Include="-fms-extensions" />
    <CastXmlArg Include="-fms-compatibility" />
    <CastXmlArg Include="-Wno-microsoft-enum-value" />
  </ItemGroup>

  <ItemGroup>
    <CastXmlArg Include="-std=$(CppStandard)" />
  </ItemGroup>

  <UsingTask AssemblyFile="@(SharpGenSdkAssembly)" TaskName="SharpGenTask" />

  <Target Name="SharpGenGetMappingsFromProjectReferencesInnerBuild"
          DependsOnTargets="PrepareProjectReferences"
          Condition="'$(IsCrossTargetingBuild)' != 'true'"
          Returns="@(SharpGenConsumerMapping)">
    <MSBuild Projects="@(_MSBuildProjectReferenceExistent)"
             Targets="SharpGenGenerateConsumerBindMappingFile"
             BuildInParallel="$(BuildInParallel)"
             Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform);"
             SkipNonexistentTargets="true"
             ContinueOnError="$(ContinueOnError)"
             RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">
      <Output TaskParameter="TargetOutputs" ItemName="SharpGenConsumerMapping" />
    </MSBuild>
  </Target>

  <Target Name="SharpGenGetMappingsFromProjectReferencesOuterBuild"
          DependsOnTargets="_GetTargetFrameworksOutput"
          Condition="'$(IsCrossTargetingBuild)' == 'true'">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="SharpGenGetMappingsFromProjectReferencesInnerBuild"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="$(ContinueOnError)"
             Properties="TargetFramework=%(_TargetFrameworks.Identity);">
      <Output TaskParameter="TargetOutputs" ItemName="SharpGenConsumerMapping" />
    </MSBuild>
  </Target>

  <!-- The up-to-date check for this target will always yield FullBuild result since it has no inputs specification -->
  <Target Name="SharpGenGenerateConsumerProps"
          DependsOnTargets="SharpGenGenerateConsumerBindMappingFile"
          Outputs="@(TfmConsumerProps)"
          Condition="'$(SharpGenGenerateConsumerBindMapping)' != 'false'">
    <ItemGroup>
      <None Include="@(SharpGenConsumerBindMappingFile)" />
      <None Include="$(SharpGenProfilePath)Package.props">
        <PackagePath>build/$(PackageId).props;buildMultiTargeting/$(PackageId).props</PackagePath>
        <Pack>true</Pack>
      </None>
    </ItemGroup>
  </Target>

  <Target Name="GenerateSharpGenBindings"
          BeforeTargets="BeforeCompile;CoreCompile"
          Condition="'@(SharpGenMapping)' != ''"
          DependsOnTargets="@(GenerateSharpGenBindingsDependsOn)" />

  <!--
    TODO: fix up docs

    What is the deal with @(SharpGenInputsCache)?
    That is an equivalent of @(SharpGenIncludedHeadersCache) from SharpGen v1.
    @(SharpGenInputsCache) is a list of headers and configs loaded by SharpGenTask during the last run.
    Note, that there may be some config files present in @(SharpGenInputsCache) and missing in @(SharpGenMapping) or @(SharpGenConsumerMapping).
    And it might be not because of removed item from the last run, but because of some dependencies specified only in config files themselves.
    Yeah, there is a way from a config file to specify a dependency on another config. It is an undocumented feature in SharpGen 1.
    It's used internally by SharpGenTask to create a "root" config file, but it is, in fact, also exposed to XML via <file /> elements.
    TODO: document this for SharpGen v2.

    How does @(SharpGenInputsCache) work?
    GenerateSharpGenBindings depends on SharpGenReadInputsCache being executed before SharpGenExecute.
    That task reads the file line-by-line and outputs it into @(SharpGenInputs) item vector for SharpGenExecute to take as an input.
    When SharpGenExecute runs SharpGenTask, it will overwrite @(SharpGenInputsCache) file with a new information.
    Since @(SharpGenInputsCache) is written before @(GeneratedCSharpFiles), it will ensure the next time project is built,
    it will pass target up-to-date checks.
  -->
  <Target Name="SharpGenExecute">
    <ItemGroup Condition="'@(SharpGenPlatforms)' == '' and '$(RuntimeIdentifier)' != ''">
      <SharpGenPlatforms Include="Windows" Condition="$(RuntimeIdentifier.StartsWith('win'))" />
      <SharpGenPlatforms Include="ItaniumSystemV" Condition="!$(RuntimeIdentifier.StartsWith('win'))" />
    </ItemGroup>

    <ItemGroup>
      <_SharpGenMappingNonexistent Include="@(SharpGenMapping)" Condition="!Exists('%(Identity)')" />
      <_SharpGenConsumerMappingNonexistent Include="@(SharpGenConsumerMapping)" Condition="!Exists('%(Identity)')" />
    </ItemGroup>

    <!-- Issue a warning for each non-existent mapping file. -->
    <Warning Text="The referenced SharpGen mapping file '%(_SharpGenMappingNonexistent.Identity)' does not exist. This is likely an error in your project file."
             File="$(MSBuildProjectFullPath)"
             Code="SD0005"
             Condition="'@(_SharpGenMappingNonexistent)' != ''"/>
    <Warning Text="The referenced SharpGen consumer mapping file '%(_SharpGenConsumerMappingNonexistent.Identity)' does not exist. Check your referenced packages and projects."
             File="$(MSBuildProjectFullPath)"
             Code="SD0006"
             Condition="'@(_SharpGenConsumerMappingNonexistent)' != ''"/>

    <ItemGroup>
      <_SharpGenMappingNonexistent Remove="@(_SharpGenMappingNonexistent)" />
      <_SharpGenConsumerMappingNonexistent Remove="@(_SharpGenConsumerMappingNonexistent)" />
    </ItemGroup>

    <SharpGenTask CastXmlArguments="@(CastXmlArg)"
                  CastXmlExecutable="@(SharpGenCastXml)"
                  ConfigFiles="@(SharpGenMapping);@(SharpGenConsumerMapping)"
                  ConsumerBindMappingConfigId="$(SharpGenConsumerBindMappingConfigId)"
                  DebugWaitForDebuggerAttach="$(SharpGenWaitForDebuggerAttach)"
                  DocumentationFailuresAsErrors="$(SharpGenDocumentationFailuresAsErrors)"
                  ExtensionAssemblies="@(SharpGenExtension)"
                  ExternalDocumentation="@(SharpGenExternalDocs)"
                  GlobalNamespaceOverrides="@(SharpGenGlobalNamespaceOverrides)"
                  Macros="$(SharpGenMacros)"
                  IntermediateOutputDirectory="$(SharpGenIntermediateOutputDirectory)"
                  PlatformName="$(PlatformName)"
                  Platforms="@(SharpGenPlatforms)"
                  RuntimeIdentifier="$(RuntimeIdentifier)"
                  SilenceMissingDocumentationErrorIdentifierPatterns="@(SharpGenSilenceMissingDocumentationErrorIdentifierPatterns)">
      <Output TaskParameter="ProfilePath"
              PropertyName="SharpGenProfilePath" />
    </SharpGenTask>

    <!-- Bonus: these don't show up in IDE file tree (no clutter) -->
    <ItemGroup>
      <Compile Include="$(SharpGenProfilePath)SharpGen.Bindings.g.cs" />
      <SharpGenConsumerBindMappingFile Include="$(SharpGenProfilePath)$(SharpGenConsumerBindMappingConfigId).BindMapping.xml">
        <PackagePath>build</PackagePath>
        <Pack>true</Pack>
      </SharpGenConsumerBindMappingFile>
    </ItemGroup>
  </Target>

  <Target Name="SharpGenGenerateConsumerBindMappingFile"
          Returns="@(SharpGenConsumerBindMappingFile)"
          DependsOnTargets="GenerateSharpGenBindings"
          Condition="'$(SharpGenGenerateConsumerBindMapping)' != 'false' and '@(SharpGenMapping)' != ''" />

  <Target Name="SharpGenClean" BeforeTargets="CoreClean">
    <ItemGroup>
      <Clean Include="$(SharpGenIntermediateOutputDirectory)SharpGen-*" />
    </ItemGroup>
  </Target>

  <!--
    ============================================================
              IncludeSharpGenRuntimePackageReference

              Add SharpGen.Runtime package reference
    ============================================================
    -->
  <Target Name="IncludeSharpGenRuntimePackageReference"
          BeforeTargets="_CheckForInvalidConfigurationAndPlatform;CollectPackageReferences"
          Condition="'$(SharpGenIncludeRuntimePackageReference)' != 'false'">
    <ItemGroup>
      <_ExistingSharpGenRuntimePackageReference Include="@(PackageReference)"
                                                Condition="'%(PackageReference.Identity)' == 'SharpGen.Runtime'" />
    </ItemGroup>

    <ItemGroup Condition="'$(SharpGenSdkUsedAsPackageReference)' != 'true'">
      <PackageReference Include="SharpGen.Runtime"
                        Version="$(SharpGenSdkVersion)"
                        IsImplicitlyDefined="true"
                        Condition="'@(_ExistingSharpGenRuntimePackageReference)' == ''" />
    </ItemGroup>

    <Warning Text="SharpGen.Runtime is implicitly referenced by the SharpGenTools MSBuild SDK. Avoid referencing it explicitly to prevent version mismatch issues."
             File="$(MSBuildProjectFullPath)"
             Code="SD0001"
             Condition="'$(SharpGenDisableExistingRuntimePackageReferenceWarning)' != 'true' and '@(_ExistingSharpGenRuntimePackageReference)' != '' and '$(SharpGenSdkUsedAsPackageReference)' != 'true'" />

    <Error Text="SharpGen.Runtime is implicitly referenced only when SharpGenTools is used as a MSBuild SDK. Set SharpGenIncludeRuntimePackageReference to false, add SharpGen.Runtime PackageReference, or switch to importing SharpGenTools as a MSBuild SDK."
           File="$(MSBuildProjectFullPath)"
           Code="SD0002"
           Condition="'$(SharpGenSdkUsedAsPackageReference)' == 'true' and '@(_ExistingSharpGenRuntimePackageReference)' == ''" />
  </Target>

  <!--
    ============================================================
              IncludeSharpGenExtensionPackageReferences

       Add package references for @(SharpGenExtensionPackage)
    ============================================================
    -->
  <Target Name="IncludeSharpGenExtensionPackageReferences"
          BeforeTargets="_CheckForInvalidConfigurationAndPlatform;CollectPackageReferences"
          Condition="'@(SharpGenExtensionPackage)' != ''">
    <ItemGroup Condition="'$(SharpGenSdkUsedAsPackageReference)' != 'true'">
      <PackageReference Include="@(SharpGenExtensionPackage)"
                        Version="%(SharpGenExtensionPackage.Version)"
                        IsImplicitlyDefined="true"
                        PrivateAssets="All" />
    </ItemGroup>

    <Error Text="SharpGenExtensionPackage only works when SharpGenTools is used as a MSBuild SDK."
           File="$(MSBuildProjectFullPath)"
           Code="SD0003"
           Condition="'$(SharpGenSdkUsedAsPackageReference)' == 'true' and '$(SharpGenDisableSharpGenExtensionPackageForPackageReferenceSdkError)' != 'true'" />
  </Target>

</Project>
